type Block {
  type: BlockType
  spans: [Span]!
}

input BlockInput {
  type: BlockType
  spans: [SpanInput]!
}

enum BlockType {
  P
}

type Entry {
	id: ID!
	content: [Block!]!
	createdAt: AWSDateTime
	date: AWSDate
	tags: [String]
	title: String!
	updatedAt: AWSDateTime
}

type EntryConnection {
	entries: [Entry]
	nextToken: String
}

input EntryInput {
	content: [SpanInput!]!
	date: AWSDate
	tags: [String]!
	title: String!
}

type Mutation {
	addEntry(entry: EntryInput): Entry
}

type Query {
	getEntries(limit: Int, nextToken: String): EntryConnection
}

type Span {
	content: String!
	type: SpanType!
}

input SpanInput {
	content: String!
	type: SpanType!
}

enum SpanType {
	Text
}

schema {
	query: Query
	mutation: Mutation
}