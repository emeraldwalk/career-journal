/* tslint:disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface Query {
  getEntry?: Entry;
  getTag?: Tag;
  listEntries: EntryConnection;
  listTags: TagConnection;
}

export interface Entry {
  content: AWSJSON;
  createdAt?: AWSDateTime;
  date: AWSDate;
  id: string;
  tags: Array<string>;
  title: string;
  updatedAt?: AWSDateTime;
}

export type AWSJSON = any;

export type AWSDateTime = any;

export type AWSDate = any;

export interface Tag {
  icon?: string;
  id: string;
  parentId: string;
  value: string;
}

export interface TableEntryFilterInput {
  createdAt?: TableStringFilterInput;
  date?: TableStringFilterInput;
  id?: TableIDFilterInput;
  tags?: TableStringFilterInput;
  title?: TableStringFilterInput;
  updatedAt?: TableStringFilterInput;
}

export interface TableStringFilterInput {
  beginsWith?: string;
  between?: Array<string | null>;
  contains?: string;
  eq?: string;
  ge?: string;
  gt?: string;
  le?: string;
  lt?: string;
  ne?: string;
  notContains?: string;
}

export interface TableIDFilterInput {
  beginsWith?: string;
  between?: Array<string | null>;
  contains?: string;
  eq?: string;
  ge?: string;
  gt?: string;
  le?: string;
  lt?: string;
  ne?: string;
  notContains?: string;
}

export interface EntryConnection {
  items: Array<Entry>;
  nextToken?: string;
}

export interface TableTagFilterInput {
  icon?: TableStringFilterInput;
  id?: TableIDFilterInput;
  parentId?: TableIDFilterInput;
  value?: TableStringFilterInput;
}

export interface TagConnection {
  items: Array<Tag>;
  nextToken?: string;
}

export interface Mutation {
  createEntry: Entry;
  createTag: Tag;
  deleteEntry: Entry;
  deleteTag: Tag;
  updateEntry: Entry;
  updateTag: Tag;
}

export interface CreateEntryInput {
  content: AWSJSON;
  createdAt?: AWSDateTime;
  date: AWSDate;
  tags: Array<string>;
  title: string;
  updatedAt?: AWSDateTime;
}

export interface CreateTagInput {
  icon?: string;
  parentId: string;
  value: string;
}

export interface DeleteEntryInput {
  id: string;
}

export interface DeleteTagInput {
  id: string;
  parentId: string;
}

export interface UpdateEntryInput {
  content?: AWSJSON;
  createdAt?: AWSDateTime;
  date: AWSDate;
  id: string;
  tags?: Array<string>;
  title: string;
  updatedAt?: AWSDateTime;
}

export interface UpdateTagInput {
  icon?: string;
  id: string;
  parentId: string;
  value: string;
}

export interface Subscription {
  onCreateEntry?: Entry;
  onCreateTag?: Tag;
  onDeleteEntry?: Entry;
  onDeleteTag?: Tag;
  onUpdateEntry?: Entry;
  onUpdateTag?: Tag;
}

export interface TableBooleanFilterInput {
  eq?: boolean;
  ne?: boolean;
}

export interface TableFloatFilterInput {
  between?: Array<number | null>;
  contains?: number;
  eq?: number;
  ge?: number;
  gt?: number;
  le?: number;
  lt?: number;
  ne?: number;
  notContains?: number;
}

export interface TableIntFilterInput {
  between?: Array<number | null>;
  contains?: number;
  eq?: number;
  ge?: number;
  gt?: number;
  le?: number;
  lt?: number;
  ne?: number;
  notContains?: number;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface Resolver {
  Query?: QueryTypeResolver;
  Entry?: EntryTypeResolver;
  AWSJSON?: GraphQLScalarType;
  AWSDateTime?: GraphQLScalarType;
  AWSDate?: GraphQLScalarType;
  Tag?: TagTypeResolver;
  EntryConnection?: EntryConnectionTypeResolver;
  TagConnection?: TagConnectionTypeResolver;
  Mutation?: MutationTypeResolver;
  Subscription?: SubscriptionTypeResolver;
}
export interface QueryTypeResolver<TParent = any> {
  getEntry?: QueryToGetEntryResolver<TParent>;
  getTag?: QueryToGetTagResolver<TParent>;
  listEntries?: QueryToListEntriesResolver<TParent>;
  listTags?: QueryToListTagsResolver<TParent>;
}

export interface QueryToGetEntryArgs {
  id: string;
}
export interface QueryToGetEntryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetEntryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetTagArgs {
  id: string;
  parentId: string;
}
export interface QueryToGetTagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetTagArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListEntriesArgs {
  filter?: TableEntryFilterInput;
  limit?: number;
  nextToken?: string;
}
export interface QueryToListEntriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToListEntriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListTagsArgs {
  filter?: TableTagFilterInput;
  limit?: number;
  nextToken?: string;
}
export interface QueryToListTagsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToListTagsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EntryTypeResolver<TParent = any> {
  content?: EntryToContentResolver<TParent>;
  createdAt?: EntryToCreatedAtResolver<TParent>;
  date?: EntryToDateResolver<TParent>;
  id?: EntryToIdResolver<TParent>;
  tags?: EntryToTagsResolver<TParent>;
  title?: EntryToTitleResolver<TParent>;
  updatedAt?: EntryToUpdatedAtResolver<TParent>;
}

export interface EntryToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EntryToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EntryToTagsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EntryToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EntryToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagTypeResolver<TParent = any> {
  icon?: TagToIconResolver<TParent>;
  id?: TagToIdResolver<TParent>;
  parentId?: TagToParentIdResolver<TParent>;
  value?: TagToValueResolver<TParent>;
}

export interface TagToIconResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToParentIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EntryConnectionTypeResolver<TParent = any> {
  items?: EntryConnectionToItemsResolver<TParent>;
  nextToken?: EntryConnectionToNextTokenResolver<TParent>;
}

export interface EntryConnectionToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EntryConnectionToNextTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagConnectionTypeResolver<TParent = any> {
  items?: TagConnectionToItemsResolver<TParent>;
  nextToken?: TagConnectionToNextTokenResolver<TParent>;
}

export interface TagConnectionToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagConnectionToNextTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationTypeResolver<TParent = any> {
  createEntry?: MutationToCreateEntryResolver<TParent>;
  createTag?: MutationToCreateTagResolver<TParent>;
  deleteEntry?: MutationToDeleteEntryResolver<TParent>;
  deleteTag?: MutationToDeleteTagResolver<TParent>;
  updateEntry?: MutationToUpdateEntryResolver<TParent>;
  updateTag?: MutationToUpdateTagResolver<TParent>;
}

export interface MutationToCreateEntryArgs {
  input: CreateEntryInput;
}
export interface MutationToCreateEntryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateEntryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateTagArgs {
  input: CreateTagInput;
}
export interface MutationToCreateTagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateTagArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteEntryArgs {
  input: DeleteEntryInput;
}
export interface MutationToDeleteEntryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteEntryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteTagArgs {
  input: DeleteTagInput;
}
export interface MutationToDeleteTagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteTagArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateEntryArgs {
  input: UpdateEntryInput;
}
export interface MutationToUpdateEntryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateEntryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateTagArgs {
  input: UpdateTagInput;
}
export interface MutationToUpdateTagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateTagArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubscriptionTypeResolver<TParent = any> {
  onCreateEntry?: SubscriptionToOnCreateEntryResolver<TParent>;
  onCreateTag?: SubscriptionToOnCreateTagResolver<TParent>;
  onDeleteEntry?: SubscriptionToOnDeleteEntryResolver<TParent>;
  onDeleteTag?: SubscriptionToOnDeleteTagResolver<TParent>;
  onUpdateEntry?: SubscriptionToOnUpdateEntryResolver<TParent>;
  onUpdateTag?: SubscriptionToOnUpdateTagResolver<TParent>;
}

export interface SubscriptionToOnCreateEntryArgs {
  content?: AWSJSON;
  createdAt?: AWSDateTime;
  date?: AWSDate;
  id?: string;
  tags?: Array<string>;
  title?: string;
}
export interface SubscriptionToOnCreateEntryResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToOnCreateEntryArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToOnCreateEntryArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToOnCreateTagArgs {
  icon?: string;
  id?: string;
  parentId?: string;
  value?: string;
}
export interface SubscriptionToOnCreateTagResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToOnCreateTagArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToOnCreateTagArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToOnDeleteEntryArgs {
  content?: AWSJSON;
  createdAt?: AWSDateTime;
  date?: AWSDate;
  id?: string;
  tags?: Array<string>;
  title?: string;
}
export interface SubscriptionToOnDeleteEntryResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToOnDeleteEntryArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToOnDeleteEntryArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToOnDeleteTagArgs {
  icon?: string;
  id?: string;
  parentId?: string;
  value?: string;
}
export interface SubscriptionToOnDeleteTagResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToOnDeleteTagArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToOnDeleteTagArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToOnUpdateEntryArgs {
  content?: AWSJSON;
  createdAt?: AWSDateTime;
  date?: AWSDate;
  id?: string;
  tags?: Array<string>;
  title?: string;
}
export interface SubscriptionToOnUpdateEntryResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToOnUpdateEntryArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToOnUpdateEntryArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToOnUpdateTagArgs {
  icon?: string;
  id?: string;
  parentId?: string;
  value?: string;
}
export interface SubscriptionToOnUpdateTagResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToOnUpdateTagArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToOnUpdateTagArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}
