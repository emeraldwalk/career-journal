AWSTemplateFormatVersion: "2010-09-09"
Description: AWS AppSync Journal API

Parameters:
  APIName:
    Type: String
    Description: Name of the API
    MinLength: 3
    MaxLength: 20
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9_]*$

Resources:
  EntryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${APIName}EntryTable
      AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Name
          Value: !Sub ${APIName}EntryTable

  TagTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${APIName}TagTable
      AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
        -
          AttributeName: parentId
          AttributeType: S
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
        -
          AttributeName: parentId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Name
          Value: !Sub ${APIName}TagTable

  DynamoDBPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow AppSync to access DynamoDB tables.
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:UpdateItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            Resource:
            - !Join [ "", [ !GetAtt EntryTable.Arn, "*" ] ]
            - !Join [ "", [ !GetAtt TagTable.Arn, "*" ] ]

  DynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${APIName}-appsync-dynamodb-role
      ManagedPolicyArns:
        - Ref: DynamoDBPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
    DependsOn:
      - DynamoDBPolicy

  UserPool:
    Type: AWS::Cognito::UserPool
    Description: User pool for authenticating api users.
    Properties:
      UserPoolName: !Sub ${APIName}-user-pool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: False
          RequireNumbers: True
          RequireSymbols: False
          RequireUppercase: True
      UserPoolTags:
        Name: !Sub ${APIName}-user-pool

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Description: App client used by AppSync api.
    Properties:
      ClientName: !Sub ${APIName}-appsync-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Description: The AppSync api.
    Properties:
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      Name: !Sub ${APIName}
      UserPoolConfig:
        # The tutorial showed this pointing to the UserPoolClient
        # but it seems this should point to the UserPool
        UserPoolId: !Ref UserPool
        AwsRegion: !Sub ${AWS::Region}
        DefaultAction: ALLOW

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Definition: |
        input CreateEntryInput {
          categoryTags: AWSJSON!
          content: AWSJSON!
          createdAt: AWSDateTime
          date: AWSDate!
          tags: [String!]!
          title: String!
          updatedAt: AWSDateTime
        }

        input CreateTagInput {
          icon: String
          parentId: ID!
          value: String!
        }

        input DeleteEntryInput {
          id: ID!
        }

        input DeleteTagInput {
          id: ID!
          parentId: ID!
        }

        type Entry {
          categoryTags: AWSJSON!
          content: AWSJSON!
          createdAt: AWSDateTime
          date: AWSDate!
          id: ID!
          tags: [String!]!
          title: String!
          updatedAt: AWSDateTime
        }

        type EntryConnection {
          items: [Entry!]!
          nextToken: String
        }

        type Mutation {
          createEntry(input: CreateEntryInput!): Entry!
          createTag(input: CreateTagInput!): Tag!
          deleteEntry(input: DeleteEntryInput!): Entry!
          deleteTag(input: DeleteTagInput!): Tag!
          updateEntry(input: UpdateEntryInput!): Entry!
          updateTag(input: UpdateTagInput!): Tag!
        }

        type Query {
          getEntry(id: ID!): Entry
          getTag(id: ID!, parentId: ID!): Tag
          listEntries(filter: TableEntryFilterInput, limit: Int, nextToken: String): EntryConnection!
          listTags(filter: TableTagFilterInput, limit: Int, nextToken: String): TagConnection!
        }

        type Subscription {
          onCreateEntry(
            createdAt: AWSDateTime,
            date: AWSDate,
            id: ID,
            tags: [String!],
            title: String
          ): Entry
            @aws_subscribe(mutations: ["createEntry"])
          onCreateTag(
            icon: String,
            id: ID,
            parentId: ID,
            value: String
          ): Tag
            @aws_subscribe(mutations: ["createTag"])
          onDeleteEntry(
            createdAt: AWSDateTime,
            date: AWSDate,
            id: ID,
            tags: [String!],
            title: String
          ): Entry
            @aws_subscribe(mutations: ["deleteEntry"])
          onDeleteTag(
            icon: String,
            id: ID,
            parentId: ID,
            value: String
          ): Tag
            @aws_subscribe(mutations: ["deleteTag"])
          onUpdateEntry(
            createdAt: AWSDateTime,
            date: AWSDate,
            id: ID,
            tags: [String!],
            title: String
          ): Entry
            @aws_subscribe(mutations: ["updateEntry"])
          onUpdateTag(
            icon: String,
            id: ID,
            parentId: ID,
            value: String
          ): Tag
            @aws_subscribe(mutations: ["updateTag"])
        }

        input TableBooleanFilterInput {
          eq: Boolean
          ne: Boolean
        }

        input TableEntryFilterInput {
          createdAt: TableStringFilterInput
          date: TableStringFilterInput
          id: TableIDFilterInput
          tags: TableStringFilterInput
          title: TableStringFilterInput
          updatedAt: TableStringFilterInput
        }

        input TableFloatFilterInput {
          between: [Float]
          contains: Float
          eq: Float
          ge: Float
          gt: Float
          le: Float
          lt: Float
          ne: Float
          notContains: Float
        }

        input TableIDFilterInput {
          beginsWith: ID
          between: [ID]
          contains: ID
          eq: ID
          ge: ID
          gt: ID
          le: ID
          lt: ID
          ne: ID
          notContains: ID
        }

        input TableIntFilterInput {
          between: [Int]
          contains: Int
          eq: Int
          ge: Int
          gt: Int
          le: Int
          lt: Int
          ne: Int
          notContains: Int
        }

        input TableStringFilterInput {
          beginsWith: String
          between: [String]
          contains: String
          eq: String
          ge: String
          gt: String
          le: String
          lt: String
          ne: String
          notContains: String
        }

        input TableTagFilterInput {
          icon: TableStringFilterInput
          id: TableIDFilterInput
          parentId: TableIDFilterInput
          value: TableStringFilterInput
        }

        type Tag {
          icon: String
          id: ID!
          parentId: ID!
          value: String!
        }

        type TagConnection {
          items: [Tag!]!
          nextToken: String
        }

        input UpdateEntryInput {
          categoryTags: AWSJSON
          content: AWSJSON,
          createdAt: AWSDateTime
          date: AWSDate!
          id: ID!
          tags: [String!]
          title: String!
          updatedAt: AWSDateTime
        }

        input UpdateTagInput {
          icon: String
          id: ID!
          parentId: ID!
          value: String!
        }

        schema {
          query: Query
          mutation: Mutation
          subscription: Subscription
        }

Outputs:
  EntryTableName:
    Description: The name of the Entry table
    Value: !Ref EntryTable
  TagTableName:
    Description: The name of the Tag table
    Value: !Ref TagTable
  CognitoUserPoolId:
    Description: The Pool ID of the Cognito User Pool
    Value: !Ref UserPool
  CognitoUserPoolClientId:
    Description: The Client ID for AWS AppSync Auth
    Value: !Ref UserPoolClient